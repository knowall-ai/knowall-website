name: Build and deploy to Azure Web App - knowall-website

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Setup Node.js cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm install
          npm install styled-jsx
          npm list styled-jsx || echo "styled-jsx not installed properly"

      - name: Build Next.js app
        run: npm run build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY || 'default-admin-key' }}

      - name: Prepare for deployment
        run: |
          # Optimize the deployment package by removing unnecessary files
          echo "Preparing optimized deployment package"
          # Exclude unnecessary files to reduce package size
          find node_modules -name "*.md" -type f -delete
          find node_modules -name "LICENSE*" -type f -delete
          find node_modules -name "*.ts" -not -name "*.d.ts" -type f -delete
          find node_modules -name "*.map" -type f -delete
          find node_modules -path "*/test/*" -type d -exec rm -rf {} +
          find node_modules -path "*/tests/*" -type d -exec rm -rf {} +
          find node_modules -path "*/docs/*" -type d -exec rm -rf {} +
      
      - name: Zip artifact for deployment
        run: |
          echo "Creating optimized deployment package"
          # Use multiple zip commands to better control what's included
          # First, zip the application code without node_modules
          zip -r release.zip . -x "node_modules/*" -x ".git/*" -x ".github/*" 
          # Then add only the essential parts of node_modules
          zip -r release.zip node_modules -x "node_modules/.bin/*" -x "node_modules/.pnpm/*"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production - Azure'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set environment variables
        run: |
          echo "Setting up environment variables for Azure App Service"
          az webapp config appsettings set --name knowall-website --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --settings OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }} NODE_ENV=production

      - name: Configure Node.js version
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Set Node.js version using the correct parameter
            az webapp config set --name knowall-website --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --linux-fx-version "NODE|22-lts"

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'knowall-website'
          slot-name: 'Production'
          package: .
          
      - name: 'Restart web app'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Restart the web app to ensure all changes are applied
            az webapp restart --name knowall-website --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}
            echo "Web app restarted, deployment complete"
